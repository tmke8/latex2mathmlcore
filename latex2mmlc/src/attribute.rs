use strum_macros::AsRefStr;

/// <mi> mathvariant attribute
#[derive(Debug, Clone, Copy, PartialEq)]
pub enum MathVariant {
    Normal = 1,
}

impl AsRef<str> for MathVariant {
    fn as_ref(&self) -> &str {
        match self {
            MathVariant::Normal => r#" mathvariant="normal""#,
        }
    }
}

#[derive(Debug, PartialEq, AsRefStr)]
pub enum Accent {
    #[strum(serialize = "true")]
    True,
    #[strum(serialize = "false")]
    False,
}

#[derive(Debug, PartialEq, AsRefStr)]
pub enum OpAttr {
    #[strum(serialize = r#" stretchy="true""#)]
    StretchyTrue = 1,
    #[strum(serialize = r#" stretchy="false""#)]
    StretchyFalse,
    #[strum(serialize = r#" movablelimits="false""#)]
    NoMovableLimits,
}

/// display style
#[derive(Debug, Clone, Copy, PartialEq, AsRefStr)]
pub enum FracAttr {
    #[strum(serialize = r#" displaystyle="true""#)]
    DisplayStyleTrue = 1,
    #[strum(serialize = r#" displaystyle="false""#)]
    DisplayStyleFalse,
    #[strum(serialize = r#" displaystyle="true" scriptlevel="0" style="padding-top: 0.1667em""#)]
    CFracStyle,
}

#[derive(Debug, Clone, PartialEq, AsRefStr)]
pub enum Style {
    #[strum(serialize = r#" displaystyle="true" scriptlevel="0""#)]
    DisplayStyle = 1,
    #[strum(serialize = r#" displaystyle="false" scriptlevel="0""#)]
    TextStyle,
    #[strum(serialize = r#" displaystyle="false" scriptlevel="1""#)]
    ScriptStyle,
    #[strum(serialize = r#" displaystyle="false" scriptlevel="2""#)]
    ScriptScriptStyle,
}

#[derive(Debug)]
pub enum Align {
    Center,
    Left,
    Alternating,
}

#[derive(Debug, AsRefStr)]
pub enum MathSpacing {
    #[strum(serialize = "0em")]
    Zero = 1,
    #[strum(serialize = "0.2222em")]
    FourMu, // 4/18 of an em/\quad
}

/// <mi> mathvariant attribute
#[derive(Debug, Clone, PartialEq)]
pub enum TextTransform {
    Bold,
    BoldFraktur,
    BoldItalic,
    BoldSansSerif,
    BoldScript,
    DoubleStruck,
    Fraktur,
    // Initial,
    Italic,
    // Looped,
    Monospace,
    SansSerif,
    SansSerifBoldItalic,
    SansSerifItalic,
    Script,
    // Stretched,
    // Tailed,
}

fn add_offset(c: char, offset: u32) -> char {
    let new_char = c as u32 + offset;
    debug_assert!(
        char::from_u32(new_char).is_some(),
        "Invalid char: {}",
        new_char
    );
    unsafe { char::from_u32_unchecked(new_char) }
}

impl TextTransform {
    #[allow(clippy::manual_is_ascii_check)]
    pub fn transform(&self, c: char) -> char {
        match self {
            TextTransform::BoldScript => match c {
                'A'..='Z' => add_offset(c, 0x1D48F),
                'a'..='z' => add_offset(c, 0x1D489),
                _ => c,
            },
            TextTransform::BoldFraktur => match c {
                'A'..='Z' => add_offset(c, 0x1D52B),
                'a'..='z' => add_offset(c, 0x1D525),
                _ => c,
            },
            TextTransform::BoldItalic => match c {
                'A'..='Z' => add_offset(c, 0x1D427),
                'a'..='z' => add_offset(c, 0x1D421),
                'Œë'..='Œ©' => add_offset(c, 0x1D38B),
                'Œ±'..='œâ' => add_offset(c, 0x1D385),
                'œ¥' => 'ùú≠',
                '‚àá' => 'ùúµ',
                '‚àÇ' => 'ùùè',
                'œµ' => 'ùùê',
                'œë' => 'ùùë',
                'œ∞' => 'ùùí',
                'œï' => 'ùùì',
                'œ±' => 'ùùî',
                'œñ' => 'ùùï',
                _ => c,
            },
            TextTransform::Bold => match c {
                'A'..='Z' => add_offset(c, 0x1D3BF),
                'a'..='z' => add_offset(c, 0x1D3B9),
                'Œë'..='Œ©' => add_offset(c, 0x1D317),
                'Œ±'..='œâ' => add_offset(c, 0x1D311),
                'œú'..='œù' => add_offset(c, 0x1D3EE),
                '0'..='9' => add_offset(c, 0x1D79E),
                'œ¥' => 'ùöπ',
                '‚àá' => 'ùõÅ',
                '‚àÇ' => 'ùõõ',
                'œµ' => 'ùõú',
                'œë' => 'ùõù',
                'œ∞' => 'ùõû',
                'œï' => 'ùõü',
                'œ±' => 'ùõ†',
                'œñ' => 'ùõ°',
                _ => c,
            },
            TextTransform::Fraktur => match c {
                'A'..='B' => add_offset(c, 0x1D4C3),
                'D'..='G' => add_offset(c, 0x1D4C3),
                'H'..='I' => add_offset(c, 0x20C4),
                'J'..='Q' => add_offset(c, 0x1D4C3),
                'S'..='Y' => add_offset(c, 0x1D4C3),
                'a'..='z' => add_offset(c, 0x1D4BD),
                'C' => '‚Ñ≠',
                'R' => '‚Ñú',
                'Z' => '‚Ñ®',
                _ => c,
            },
            TextTransform::Script => match c {
                'C'..='D' => add_offset(c, 0x1D45B),
                'E'..='F' => add_offset(c, 0x20EB),
                'H'..='I' => add_offset(c, 0x20C3),
                'J'..='K' => add_offset(c, 0x1D45B),
                'N'..='Q' => add_offset(c, 0x1D45B),
                'S'..='Z' => add_offset(c, 0x1D45B),
                'a'..='d' => add_offset(c, 0x1D455),
                'h'..='n' => add_offset(c, 0x1D455),
                'p'..='z' => add_offset(c, 0x1D455),
                'A' => 'ùíú',
                'B' => '‚Ñ¨',
                'G' => 'ùí¢',
                'L' => '‚Ñí',
                'M' => '‚Ñ≥',
                'R' => '‚Ñõ',
                'e' => '‚ÑØ',
                'f' => 'ùíª',
                'g' => '‚Ñä',
                'o' => '‚Ñ¥',
                _ => c,
            },
            TextTransform::Monospace => match c {
                'A'..='Z' => add_offset(c, 0x1D62F),
                'a'..='z' => add_offset(c, 0x1D629),
                '0'..='9' => add_offset(c, 0x1D7C6),
                _ => c,
            },
            TextTransform::SansSerif => match c {
                'A'..='Z' => add_offset(c, 0x1D55F),
                'a'..='z' => add_offset(c, 0x1D559),
                '0'..='9' => add_offset(c, 0x1D7B2),
                _ => c,
            },
            TextTransform::SansSerifBoldItalic => match c {
                'A'..='Z' => add_offset(c, 0x1D5FB),
                'a'..='z' => add_offset(c, 0x1D5F5),
                'Œë'..='Œ©' => add_offset(c, 0x1D3FF),
                'Œ±'..='œâ' => add_offset(c, 0x1D3F9),
                'œ¥' => 'ùû°',
                '‚àá' => 'ùû©',
                '‚àÇ' => 'ùüÉ',
                'œµ' => 'ùüÑ',
                'œë' => 'ùüÖ',
                'œ∞' => 'ùüÜ',
                'œï' => 'ùüá',
                'œ±' => 'ùüà',
                'œñ' => 'ùüâ',
                _ => c,
            },
            TextTransform::SansSerifItalic => match c {
                'A'..='Z' => add_offset(c, 0x1D5C7),
                'a'..='z' => add_offset(c, 0x1D5C1),
                _ => c,
            },
            TextTransform::BoldSansSerif => match c {
                'A'..='Z' => add_offset(c, 0x1D593),
                'a'..='z' => add_offset(c, 0x1D58D),
                'Œë'..='Œ©' => add_offset(c, 0x1D3C5),
                'Œ±'..='œâ' => add_offset(c, 0x1D3BF),
                '0'..='9' => add_offset(c, 0x1D7BC),
                'œ¥' => 'ùùß',
                '‚àá' => 'ùùØ',
                '‚àÇ' => 'ùûâ',
                'œµ' => 'ùûä',
                'œë' => 'ùûã',
                'œ∞' => 'ùûå',
                'œï' => 'ùûç',
                'œ±' => 'ùûé',
                'œñ' => 'ùûè',
                _ => c,
            },
            TextTransform::DoubleStruck => match c {
                'A'..='B' => add_offset(c, 0x1D4F7),
                'D'..='G' => add_offset(c, 0x1D4F7),
                'I'..='M' => add_offset(c, 0x1D4F7),
                'P'..='Q' => add_offset(c, 0x20C9),
                'S'..='Y' => add_offset(c, 0x1D4F7),
                'a'..='z' => add_offset(c, 0x1D4F1),
                '0'..='9' => add_offset(c, 0x1D7A8),
                'C' => '‚ÑÇ',
                'H' => '‚Ñç',
                'N' => '‚Ñï',
                'R' => '‚Ñù',
                'Z' => '‚Ñ§',
                _ => c,
            },
            TextTransform::Italic => match c {
                'A'..='Z' => add_offset(c, 0x1D3F3),
                'a'..='g' => add_offset(c, 0x1D3ED),
                'i'..='z' => add_offset(c, 0x1D3ED),
                'Œë'..='Œ©' => add_offset(c, 0x1D351),
                'Œ±'..='œâ' => add_offset(c, 0x1D34B),
                'h' => '‚Ñé',
                'ƒ±' => 'ùö§',
                '»∑' => 'ùö•',
                'œ¥' => 'ùõ≥',
                '‚àá' => 'ùõª',
                '‚àÇ' => 'ùúï',
                'œµ' => 'ùúñ',
                'œë' => 'ùúó',
                'œ∞' => 'ùúò',
                'œï' => 'ùúô',
                'œ±' => 'ùúö',
                'œñ' => 'ùúõ',
                _ => c,
            },
        }
    }
}

#[cfg(test)]
mod tests {
    use super::TextTransform;

    #[test]
    fn transform_test() {
        let problems = [
            ('G', TextTransform::BoldScript, 'ùìñ'),
            ('H', TextTransform::Italic, 'ùêª'),
            ('X', TextTransform::Fraktur, 'ùîõ'),
        ];
        for (source, transform, target) in problems.into_iter() {
            assert_eq!(
                target,
                transform.transform(source),
                "executed: {:?}({})",
                transform,
                source
            );
        }
    }
}
